/*
 * Copyright 2014-2015. Adaptive.me.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.DefaultLogger
import org.apache.tools.ant.Project

print   "\n\n" +
        "\t############### Welcome to #################\n" +
        "\t              _             _   _           \n" +
        "\t     /\\      | |           | | (_)          \n" +
        "\t    /  \\   __| | __ _ _ __ | |_ ___   _____ \n" +
        "\t   / /\\ \\ / _` |/ _` | '_ \\| __| \\ \\ / / _ \\\n" +
        "\t  / ____ \\ (_| | (_| | |_) | |_| |\\ V /  __/\n" +
        "\t /_/    \\_\\__,_|\\__,_| .__/ \\__|_| \\_/ \\___|\n" +
        "\t                     | |                    \n" +
        "\t                     |_|                    \n"

println "\t###### Base IDE build system ###############\n\n\n"
/**
 * Get a property, if no property with the given name is found return the default
 */
binding.setVariable("prop", {String key, String defaultValue = null ->
    try{
        return ext[key]
    }catch (Exception e){
        if(System.env[key] != null){
            println "Using environment varible for $key as ${System.env[key]}"
            ext[key] = System.env[key]
        }else {
            println "Setting prop $key with the defaultValue $defaultValue"
            ext[key] = defaultValue
        }
        return ext[key]
    }

})

prop("basePath",file(".").absolutePath)
def antBuildFile = "$basePath/intellij-community/build.xml"

if (file(antBuildFile).exists()){
    println "[$antBuildFile] exists, intellij-community is initialized"

    //TODO find a smarter way to pass properties to the ant/gant calls as this is really dirty
    def antFileText = file(antBuildFile).getText('UTF-8')
    if(!antFileText.contains("ideProperties")){
        println "$antBuildFile does not pass the ideProperties to the gant call, adding it"
        antFileText = antFileText.replace('<arg value="-f"/>',"<sysproperty key=\"ideProperties\" value=\"${file(ideProperties).absolutePath}\"/>\n<arg value=\"-f\"/>")
    }
    file(antBuildFile).write(antFileText,'UTF-8')


    //Importing Ant Tasks
    ant.importBuild(antBuildFile)
    //redirecting the ant output to the current console.
    def consoleLogger = new DefaultLogger();
    consoleLogger.errorPrintStream = System.err;
    consoleLogger.outputPrintStream = System.out;
    consoleLogger.messageOutputLevel = Project.MSG_INFO;
    ant.project.addBuildListener(consoleLogger);

}else{

    println "Sub module intellij-community  not initialized"
    throw new GradleException("Submodule intellij-community not initalized, execute the script get-idea.sh before proceeding with the build")
}

task addAdaptiveModules << {

  prop('modulesFile', basePath + '/intellij-community/.idea/modules.xml')
  prop('mainModule', basePath + '/intellij-community/community-main.iml')
  prop('brandingModuleName', 'base-branding') //defaulting if not previously set

  prop('brandingModulePath',"$basePath/$brandingModuleName") //defaulting if not previously set
  def modulesFileText = file(modulesFile).getText('UTF-8')
  //TODO use a list to support several modules to be added
  if(!modulesFileText.contains("${brandingModuleName}.iml")){
    println "$modulesFile does not contain the adaptive modules. They will be added"
    modulesFileText = modulesFileText.replace('</modules>',"<module fileurl=\"file://${brandingModulePath}/${brandingModuleName}.iml\" filepath=\"${brandingModulePath}/${brandingModuleName}.iml\" group=\"plugins\" />\n</modules>")
    file(modulesFile).write(modulesFileText,'UTF-8')
  }else{
    println 'UP-TO-DATE' //TODO change it to the gradle outputs.upToDateWhen
  }

  //TODO use a list to support several modules to be added
  String mainModuleText = file(mainModule).getText('UTF-8')
  if(!mainModuleText.contains(brandingModuleName)){
    println "$mainModule does not contain the adaptive modules. They will be added"
    mainModuleText = mainModuleText.replace('</component>',"<orderEntry type=\"module\" module-name=\"$brandingModuleName\" />\n</component>")
    file(mainModule).write(mainModuleText,'UTF-8')
  }else{
    println 'UP-TO-DATE' //TODO change it to the gradle outputs.upToDateWhen
  }




}

task copyScripts(type:Copy) {
    from "$basePath/scripts"
    into "$basePath/intellij-community/build/scripts"
}

task cleanupIdea(dependsOn:addAdaptiveModules) <<{
    //TODO actually clean up the plugins and scripts
    println 'cleaning up the idea plugins that we don\'t use'

}


//make sure the scripts are copied and the idea have been clean up before build
tasks.findByName("build").mustRunAfter = [cleanupIdea,copyScripts]

task buildIdea(dependsOn:[build,cleanupIdea,copyScripts]) <<{

    println "Creating base ide"

}

task assemble(dependsOn:buildIdea)<<{

}

task check()<<{
  // make sure environment is sane
}

defaultTasks 'assemble'
